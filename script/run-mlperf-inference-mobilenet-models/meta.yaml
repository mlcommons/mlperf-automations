alias: run-mlperf-inference-mobilenet-models
automation_alias: script
automation_uid: 5b4e0237da074764
category: MLPerf benchmark support
default_env:
  MLC_MLPERF_NO_RERUN: 'no'
  MLC_MLPERF_RUN_EFFICIENTNETS: 'no'
  MLC_MLPERF_RUN_FP32: 'yes'
  MLC_MLPERF_RUN_INT8: 'yes'
  MLC_MLPERF_RUN_MOBILENETS: 'no'
  MLC_USE_DATASET_FROM_HOST: 'yes'
deps:
- tags: get,sys-utils-mlc
docker:
  deps:
    - tags: get,mlperf,inference,results,dir,local
      names:
      - get-mlperf-inference-results-dir
      skip_if_env:
        OUTPUT_BASE_DIR: [ on ]
    - tags: get,mlperf,inference,submission,dir,local
      names:
      - get-mlperf-inference-submission-dir
      skip_if_env:
        MLC_MLPERF_INFERENCE_SUBMISSION_DIR: [ on ]
    - tags: get,dataset,imagenet,validation,original,_full
      enable_if_env:
        MLC_USE_DATASET_FROM_HOST:
        - 'yes'
      names:
        - imagenet-original
        - dataset-original
  input_mapping:
    imagenet_path: MLC_DATASET_IMAGENET_PATH
    results_dir: MLC_MLPERF_INFERENCE_RESULTS_DIR
    submission_dir: MLC_MLPERF_INFERENCE_SUBMISSION_DIR
  fake_run_deps: false
  pre_run_cmds:
    - mlc pull repo
  mounts:
   - "${{ MLC_DATASET_IMAGENET_PATH }}:${{ MLC_DATASET_IMAGENET_PATH }}"
   - "${{ MLC_MLPERF_INFERENCE_RESULTS_DIR }}:${{ MLC_MLPERF_INFERENCE_RESULTS_DIR }}"
   - "${{ OUTPUT_BASE_DIR }}:${{ OUTPUT_BASE_DIR }}"
   - "${{ MLC_MLPERF_INFERENCE_SUBMISSION_DIR }}:${{ MLC_MLPERF_INFERENCE_SUBMISSION_DIR }}"
  run: true
  interactive: true
  mlc_repo: mlcommons@mlperf-automations
  mlc_repo_branch: dev
  real_run: False
  os_version: '22.04'
input_mapping:
  find-performance: MLC_MLPERF_FIND_PERFORMANCE_MODE
  imagenet_path: IMAGENET_PATH
  no-rerun: MLC_MLPERF_NO_RERUN
  power: MLC_MLPERF_POWER
  results_dir: MLC_MLPERF_INFERENCE_RESULTS_DIR
  submission: MLC_MLPERF_SUBMISSION_MODE
  submission_dir: MLC_MLPERF_INFERENCE_SUBMISSION_DIR
tags:
- run
- mobilenet
- models
- image-classification
- mobilenet-models
- mlperf
- inference
uid: f21cc993a8b14a58
variations:
  accuracy-only:
    env:
      MLC_MLPERF_ACCURACY_MODE: 'yes'
      MLC_MLPERF_FIND_PERFORMANCE_MODE: 'no'
      MLC_MLPERF_SUBMISSION_MODE: 'no'
    group: run-mode
  all-models:
    default: true
    env:
      MLC_MLPERF_RUN_EFFICIENTNETS: 'yes'
      MLC_MLPERF_RUN_MOBILENETS: 'yes'
    group: model-selection
  armnn:
    env:
      MLC_MLPERF_USE_ARMNN_LIBRARY: 'yes'
  efficientnet:
    env:
      MLC_MLPERF_RUN_EFFICIENTNETS: 'yes'
    group: model-selection
  find-performance:
    env:
      MLC_MLPERF_FIND_PERFORMANCE_MODE: 'yes'
      MLC_MLPERF_SUBMISSION_MODE: 'no'
    group: run-mode
  mobilenet:
    env:
      MLC_MLPERF_RUN_MOBILENETS: 'yes'
    group: model-selection
  mobilenet-v1:
    env:
      MLC_MLPERF_RUN_MOBILENET_V1: 'yes'
    group: model-selection
  mobilenet-v2:
    env:
      MLC_MLPERF_RUN_MOBILENET_V2: 'yes'
    group: model-selection
  mobilenet-v3:
    env:
      MLC_MLPERF_RUN_MOBILENET_V3: 'yes'
    group: model-selection
  neon:
    env:
      MLC_MLPERF_USE_NEON: 'yes'
  only-fp32:
    env:
      MLC_MLPERF_RUN_INT8: 'no'
  only-int8:
    env:
      MLC_MLPERF_RUN_FP32: 'no'
  opencl:
    env:
      MLC_MLPERF_USE_OPENCL: 'yes'
  performance-and-accuracy:
    default: 'true'
    env:
      MLC_MLPERF_ACCURACY_MODE: 'yes'
      MLC_MLPERF_FIND_PERFORMANCE_MODE: 'no'
      MLC_MLPERF_PERFORMANCE_MODE: 'yes'
      MLC_MLPERF_SUBMISSION_MODE: 'no'
    group: run-mode
  performance-only:
    env:
      MLC_MLPERF_FIND_PERFORMANCE_MODE: 'no'
      MLC_MLPERF_PERFORMANCE_MODE: 'yes'
      MLC_MLPERF_SUBMISSION_MODE: 'no'
    group: run-mode
  submission:
    env:
      MLC_MLPERF_FIND_PERFORMANCE_MODE: 'no'
      MLC_MLPERF_SUBMISSION_MODE: 'yes'
    group: run-mode
  tflite:
    default: true
    group: base-framework
  tflite,armnn:
    env:
      MLC_MLPERF_TFLITE_ARMNN: 'yes'
  tflite,armnn,neon:
    env:
      MLC_MLPERF_TFLITE_ARMNN_NEON: 'yes'
  tflite,armnn,opencl:
    env:
      MLC_MLPERF_TFLITE_ARMNN_OPENCL: 'yes'
  tflite-default:
    default: true
    env:
      MLC_MLPERF_TFLITE_DEFAULT_MODE: 'yes'
    group: optimization
  use-neon:
    alias: neon
tests:
  run_inputs:
  - env:
      MLC_TEST_ONE_RUN: 'yes'
    variations_list: 
    - tflite
    - accuracy_only
    adr:
      compiler:
        tags: gcc
